#!/usr/bin/env node
const { program } = require("commander");
const { exportNotebook } = require("./export");
const { runServer } = require("./run");

function parseSecrets(values) {
  const secrets = new Map();
  for (const value of values) {
    const colonI = value.indexOf(":");
    if (colonI < 0)
      throw Error(
        `--secret error: colon not found.  syntax: "name:value", found "${value}"`
      );
    secrets.set(
      value.substring(0, colonI),
      value.substring(colonI + 1, value.length)
    );
  }
  return secrets;
}

// TODO
// 1) add --allow-file-attachments permission flag
// 2) add --stdlib path option
// 3) add --tree-shake "a,b,viewof c"
// 4) add --target "a,b,c" for index.html observing
program
  .version(require("../package.json").version)
  .command("export <notebook> <outfile>")
  .description(
    "Export a notebook to a directory containg compiled ES modules, File Attachments, runtime/stdlib JS files, and an example index.html."
  )
  .option(
    "--stdlib <path>",
    "Path to JS file that the browser will execute as-is to add to the notebooks builtin variables."
  )
  .option(
    "--target [cells...]",
    "Array of cells to 'target' when embeding in the index.html file. Only these cells will be observed."
  )
  .action((inPath, outPath, options) => {
    exportNotebook(inPath, outPath, options);
  });

program
  .command("run <notebook>")
  .description(
    "Start a server that runs the given Observable notebook (from a .ojs file)."
  )
  .option(
    "--stdlib <path>",
    "Path to JS file that the browser will execute as-is to add to the notebooks builtin variables."
  )
  .option(
    "--allow-file-attachments",
    "Allow all .ojs notebooks access the filesystem with the FileAttachments feature.",
    false
  )
  .option(
    "--allow-secrets",
    "Allow all .ojs notebooks access to passed in Secrets.",
    false
  )
  .option("--secret, [secret_name:secret_value...]")
  .option("-p, --port <number>", "Port that the server should listen on", 8080)
  .option("--no-open", "Don't open a new browser window on launch")
  .action((notebook, options) => {
    const secrets = parseSecrets(options.secret || []);
    runServer({
      port: +options.port,
      allowFileAttachments: options.allowFileAttachments,
      stdibPath: options.stdlib,
      notebookPath: notebook,
      allowSecrets: options.allowSecrets,
      open: options.open,
      secrets,
    });
  });

program.parse(process.argv);
