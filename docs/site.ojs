#!/usr/bin/env dataflow run --allow-file-attachments -p 9002
/*
FileAttachments: 
  package.json: ../package.json
  quickstart: ./quickstart.md
  stdlib: ./stdlib.md
  file-attachments: ./file-attachments.md
  importing: ./importing.md
  secrets: ./secrets.md
  production: ./production.md
  compiling: ./compiling.md
  reference: ./reference.md
  shebang: ./shebang.md
*/
nav = html`<nav>
<h1 id=title>Dataflow Documentation</h1>

<span class=version>v${(await FileAttachment("package.json").json()).version}</span>

<a href="https://github.com/asg017/dataflow" style="color: black; ">
  <i class="bx bxl-github" style=" font-weight: 900; font-size: 1.5rem;"></i>
  <span class="gh-label">Github</span>
</a>` 

content = html`<div class=container>
  ${toc()}
  <article class=content></article>
</div>`

navParent = {
  nav.parentElement.classList.add("nav-parent");
  invalidation.then(() => nav.parentElement.classList.remove("nav-parent"));
  return html`<span>`;
}

md`---`


md`👇🏼 Everything below this line won't appear after we compile the docs`

pageMeta = pages.map(p=>{
  const dom = p();
  const h2 = dom.querySelector("h2");
  return {
      header: h2 && h2.textContent,
      id: h2 && h2.getAttribute("id")
  }
})

mutable currentI = {
  const i = pageMeta.findIndex(p=>p.id === window.location.hash.substring(1));

  if(i >=0) return i;
  return 0;
}

updateContent = {
  const container = content.querySelector("article.content");
  while(container.firstChild) container.removeChild(container.firstChild);
  container.append(pages[currentI]());
  window.scrollTo(0, 0);
  return html`<span>`;
}


hashchange = {
  function onhashchange() {
    const i = pageMeta.findIndex(p=>p.id === window.location.hash.substring(1));
    if(i >=0) mutable currentI = i;
  }

  window.addEventListener("hashchange", onhashchange, false);
  invalidation.then( () => window.removeEventListener("hashchange", onhashchange))
  return html`<span>`;
}

hash = {
  window.location.hash = pageMeta[currentI].id;
  document.title = `${pageMeta[currentI].header} / Dataflow Documentation`;
  return html`<span>`;
}


// When compiling this notebook, LiveFileAttachment references aren't picked up by the parser (since it's not a "feature" like FileAttachments), so the files aren't copied to the compiled bundle bc they are tree-shaken away. As a workaround, reference them with FileAttachment and include the cell reference in --tree-shake. Should either 1) allow the parser to define new features (fork or PR), 2) allow compiled notebook to include unreferenced FAs, or 3) have some sort of macro/pre-processing that converts LiveFileAttachment -> FileAttachment before passing into parser (hard)
files = {
  FileAttachment("quickstart");
  FileAttachment("stdlib");
  FileAttachment("file-attachments");
  FileAttachment("importing");
  FileAttachment("secrets");
  FileAttachment("production");
  FileAttachment("compiling");
  FileAttachment("reference");
  FileAttachment("shebang");
}

quickstartFile = LiveFileAttachment("quickstart")
quickstartText = quickstartFile.text()
quickstart = () => md([quickstartText])



stdlibFile = LiveFileAttachment("stdlib")
stdlibText = stdlibFile.text()
stdlib = () => md([stdlibText])

fileattachmentsFile = LiveFileAttachment("file-attachments")
fileattachmentsText = fileattachmentsFile.text()
fileattachments = () => md([fileattachmentsText])


secretsFile = LiveFileAttachment("secrets")
secretsText = secretsFile.text()
secrets = ()=> md([secretsText])

importingFile = LiveFileAttachment("importing")
importingText = importingFile.text()
importing = ()=> md([importingText])


compilingFile = LiveFileAttachment("compiling")
compilingText = compilingFile.text()
compiling = ()=> md([compilingText])


productionFile = LiveFileAttachment("production")
productionText = productionFile.text()
production = ()=> md([productionText])

referenceFile = LiveFileAttachment("reference")
referenceText = referenceFile.text()
reference = () => md([referenceText])


shebangFile = LiveFileAttachment("shebang")
shebangText = shebangFile.text()
shebang = () => md([shebangText])

pages = [quickstart, importing,  fileattachments, stdlib, secrets, compiling, shebang, production, reference, ]

function toc() {
  return html`<aside class="toc-container">
    <ul class="toc">
      ${pages.map( (p,i) => {
        const page = p();
        function onClick(){
          mutable currentI = i;
        }
        const header = (page.querySelector("h2") || page).textContent;
        const subs = Array.from(page.querySelectorAll("h3")).map(d=>d.textContent);

        return html`<li class="toc-item toc-item-${i}" onClick=${onClick}>
          <span class=head>${header}</span>
          <ul class="toc-sub">
            ${subs.map(s=>html`<li>${s}`)}
          </ul>
        </li>` 
      })}
  </ul>`
}

styleTOC = html`<style>
.toc-item-${currentI} {
  color: purple;
}`


// stying only for `dataflow run`
html`<style> 
#dataflow-container {
  width: 100%;
  max-width: 100%;
  margin: 0;
  padding: 0;
  overflow: unset;
}
`

style = html`
<link rel="stylesheet"
  href="https://cdn.jsdelivr.net/npm/boxicons@latest/css/boxicons.min.css">

<style>
body {
  padding: 0;
  margin: 0;
}
.observablehq {
  overflow: unset; /* fucks with position sticky */
}

#title {
  border: none;
  padding: 0;
  margin: 0; 
  height: 3rem;
}

.nav-parent {
  position: sticky; 
  postion: -webkit-sticky;
  top: 0; 
  z-index: 20;
}

nav {
  background-color: #67a9cf; 
  position: sticky; 
  top: 0; 
  z-index: 20;
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding-left: 2rem;
  padding-right: 4rem;
}
.gh-label {
  font-size: 1.5rem; 
  line-height: 1.5rem; 
  font-weight: 500;
}
.container {
  display: grid; 
  grid-template-columns: 18rem minmax(auto, 800px);
  grid-gap: 1rem;
  height: 100%;
  margin-top: 3rem;
}
.toc-container {
  height: 100vh;
  position: sticky;
  display: block;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
}
.toc {
  border-right: 1px solid #ccc;
  height: 100%;
  overflow: auto;
}
.toc-sub {
  font-size: .95rem;
  padding: 0;
  padding-left: .5rem!important;
}
.toc-item {
  font-size: 1.1rem;
  cursor: pointer;
}
.toc-item .head {
  font-weight: 600;
}
.toc li:hover {
  background-color: lavender;
}
.content {
  width: 100%;
  max-width: 48rem;
  margin: 0 auto;
  padding: 0 .5rem;
}

@media (max-width: 700px) {
  .container {
    grid-template-columns: auto;
  }
  .toc-container {
    position: unset;
    height: 400px;
    margin: 0 auto;
    width: 100%;
  }
  .toc {
    border-right: none;
  }
  nav {
    white-space: nowrap;
  }
  .gh-label {
    display: none;
  }
}

.version {
  font-size: 1rem;
  font-weight: 600;
  font-family: Monospace;
  background: #ccc;
  letter-spacing: -2px;
  padding: .125rem .25rem;
  border-radius: .25rem;
  margin-bottom: .25rem;
}`